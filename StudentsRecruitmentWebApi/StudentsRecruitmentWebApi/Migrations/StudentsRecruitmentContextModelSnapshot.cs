// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using MySql.Data.EntityFrameworkCore.Storage.Internal;
using StudentsRecruitmentWebApi.Data.DAL;
using StudentsRecruitmentWebApi.Data.Models;
using System;

namespace StudentsRecruitmentWebApi.Migrations
{
    [DbContext(typeof(StudentsRecruitmentContext))]
    partial class StudentsRecruitmentContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026");

            modelBuilder.Entity("StudentsRecruitmentWebApi.Data.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ApartmentNumber");

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<int>("HouseNumber");

                    b.Property<string>("PostOffice");

                    b.Property<string>("PostalCode");

                    b.Property<string>("Street");

                    b.Property<string>("TypeOfTown");

                    b.Property<string>("Voivodeship");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("StudentsRecruitmentWebApi.Data.Models.Candidate", b =>
                {
                    b.Property<int>("CandidateId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AddressId");

                    b.Property<DateTime>("BirthDate");

                    b.Property<int?>("CompletedHighSchoolInformationId");

                    b.Property<int?>("CompletedStudiesInformationId");

                    b.Property<string>("FamilyName");

                    b.Property<string>("FatherName");

                    b.Property<string>("FirstName");

                    b.Property<string>("Gender");

                    b.Property<int?>("GroupId");

                    b.Property<byte[]>("Image")
                        .HasColumnType("blob");

                    b.Property<string>("LastName");

                    b.Property<string>("MotherName");

                    b.Property<string>("Nationality");

                    b.Property<long>("Pesel");

                    b.Property<string>("SecondName");

                    b.Property<int?>("SelectedStudiesId");

                    b.Property<int>("Status");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.Property<bool>("isRecruitmentPaid");

                    b.HasKey("CandidateId");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("CompletedHighSchoolInformationId")
                        .IsUnique();

                    b.HasIndex("CompletedStudiesInformationId")
                        .IsUnique();

                    b.HasIndex("GroupId");

                    b.HasIndex("SelectedStudiesId")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Candidates");
                });

            modelBuilder.Entity("StudentsRecruitmentWebApi.Data.Models.CompletedHighSchoolInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CommissionHeadquarters");

                    b.Property<float>("ForeignLanguageGrade");

                    b.Property<int>("HighSchoolGraduationYear");

                    b.Property<string>("HighSchoolHeadguarters");

                    b.Property<string>("HighSchoolName");

                    b.Property<float>("MathGrade");

                    b.Property<string>("MaturityCertificateNumber");

                    b.Property<float>("PolishLanguageGrade");

                    b.Property<string>("SelectedSubject");

                    b.Property<float>("SelectedSubjectGrade");

                    b.HasKey("Id");

                    b.ToTable("CompletedHighSchoolInformations");
                });

            modelBuilder.Entity("StudentsRecruitmentWebApi.Data.Models.CompletedStudiesInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CompletedStudyField");

                    b.Property<string>("CompletedStudySpecialization");

                    b.Property<float>("DiplomaGrade");

                    b.Property<string>("DiplomaNumber");

                    b.Property<float>("ForeignLanguageGrade");

                    b.Property<string>("ObtainedTitle");

                    b.Property<string>("UniversityFullName");

                    b.Property<int>("UniversityGraduationYear");

                    b.Property<string>("UniversityHeadquarters");

                    b.HasKey("Id");

                    b.ToTable("CompletedStudiesInformations");
                });

            modelBuilder.Entity("StudentsRecruitmentWebApi.Data.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Degree");

                    b.Property<string>("Faculty");

                    b.Property<string>("Field");

                    b.Property<string>("Form");

                    b.Property<string>("GroupName");

                    b.Property<string>("Specialization");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("StudentsRecruitmentWebApi.Data.Models.Recruiter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Faculty");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsAdmin");

                    b.Property<string>("LastName");

                    b.Property<int>("UserId");

                    b.Property<string>("UserId1");

                    b.HasKey("Id");

                    b.HasIndex("UserId1");

                    b.ToTable("Recruiters");
                });

            modelBuilder.Entity("StudentsRecruitmentWebApi.Data.Models.SelectedStudies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("SelectedDegreeOfStudy");

                    b.Property<string>("SelectedFieldOfStudy");

                    b.Property<string>("SelectedFormOfStudy");

                    b.Property<string>("SelectedSpecialization");

                    b.HasKey("Id");

                    b.ToTable("SelectedStudies");
                });

            modelBuilder.Entity("StudentsRecruitmentWebApi.Data.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Login");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("Password");

                    b.Property<string>("PasswordHash");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<int>("Type");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("StudentsRecruitmentWebApi.Data.Models.Candidate", b =>
                {
                    b.HasOne("StudentsRecruitmentWebApi.Data.Models.Address", "Address")
                        .WithOne("Candidate")
                        .HasForeignKey("StudentsRecruitmentWebApi.Data.Models.Candidate", "AddressId")
                        .HasConstraintName("FK_Candidates_Addresses_Id");

                    b.HasOne("StudentsRecruitmentWebApi.Data.Models.CompletedHighSchoolInformation", "CompletedHighSchoolInformation")
                        .WithOne("Candidate")
                        .HasForeignKey("StudentsRecruitmentWebApi.Data.Models.Candidate", "CompletedHighSchoolInformationId")
                        .HasConstraintName("FK_Candidates_CompletedHighSchoolInformations_Id");

                    b.HasOne("StudentsRecruitmentWebApi.Data.Models.CompletedStudiesInformation", "CompletedStudiesInformation")
                        .WithOne("Candidate")
                        .HasForeignKey("StudentsRecruitmentWebApi.Data.Models.Candidate", "CompletedStudiesInformationId")
                        .HasConstraintName("FK_Candidates_CompletedStudiesInformations_Id");

                    b.HasOne("StudentsRecruitmentWebApi.Data.Models.Group", "Group")
                        .WithMany("Candidates")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("FK_Candidates_Groups_Id");

                    b.HasOne("StudentsRecruitmentWebApi.Data.Models.SelectedStudies", "SelectedStudies")
                        .WithOne("Candidate")
                        .HasForeignKey("StudentsRecruitmentWebApi.Data.Models.Candidate", "SelectedStudiesId")
                        .HasConstraintName("FK_Candidates_SelectedStudies_Id");

                    b.HasOne("StudentsRecruitmentWebApi.Data.Models.User", "User")
                        .WithOne("Candidate")
                        .HasForeignKey("StudentsRecruitmentWebApi.Data.Models.Candidate", "UserId")
                        .HasConstraintName("FK_Candidates_Users_Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("StudentsRecruitmentWebApi.Data.Models.Recruiter", b =>
                {
                    b.HasOne("StudentsRecruitmentWebApi.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId1");
                });
#pragma warning restore 612, 618
        }
    }
}
